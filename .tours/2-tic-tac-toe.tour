{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2. Tic-Tac-Toe",
  "steps": [
    {
      "title": "Introduction",
      "description": "### Introduction\n\nNow that you have found your way around an Anchor program, let's look at how a [Tic-Tac-Toe game](https://en.wikipedia.org/wiki/Tic-tac-toe) can be modelled as a program.\n\n_This tour will more or less follow the narrative in the [Anchor documentation tutorial](https://www.anchor-lang.com/docs/tic-tac-toe)._\n\nFor this program, we will have 2 instructions:\n\n1. Setup Game: Create the game board and capture who is playing the game\n1. Play: Each player's turn playing the game\n\n> Remember to take breaks. You can always resume a tour later."
    },
    {
      "file": "programs/tic-tac-toe/src/state/game.rs",
      "selection": {
        "start": {
          "line": 6,
          "character": 1
        },
        "end": {
          "line": 12,
          "character": 2
        }
      },
      "description": "### Game Setup: State (1)\n\nFirst, we need to think about what data we want to store for the game.\n\n* The players (accounts)\n* Whose turn is it\n* The game board\n* The current state of the game, i.e. game in progress, player 1 won, etc.\n\nSince Solana programs are stateless, these need to be stored in a separate account.\n\nTo create a new account, we also need to work out how many bytes the account need. You can see this calculation in the comments next to each field. See the [Space](https://www.anchor-lang.com/docs/space) reference guide from Anchor documentation for more info."
    },
    {
      "file": "programs/tic-tac-toe/src/state/game.rs",
      "description": "### Game Setup: State (2)\n\nYou may have noticed in the `Game` struct, we had a few custom types. These are defined as enums with a bunch of traits. \n\nOf note are `AnchorSerialize` and `AnchorDeserialize`. These implement the Borsh (de)serialisation of these types. All types used in `#[account]` structs must implement these traits. \n\nOther interesting ones are `FromPrimitive` and `ToPrimitive`, which help derive a value for each enum value. We added a couple of dependencies to [Cargo.toml](./programs/tic-tac-toe/Cargo.toml) to enable these.",
      "selection": {
        "start": {
          "line": 114,
          "character": 1
        },
        "end": {
          "line": 133,
          "character": 2
        }
      }
    },
    {
      "file": "programs/tic-tac-toe/src/state/game.rs",
      "description": "### Game Setup: State (3)\n\nNow, we are ready to add the game logic!\n\nThis is just plain Rust code so we won't examine it too closely.\n\nPlease review it to understand what each function does at a high level.",
      "line": 14
    },
    {
      "file": "programs/tic-tac-toe/src/state/game.rs",
      "description": "### Game Setup: State (4)\n\nOk, I lied - let's look at roughly what `play()` does:\n\n1. Return error if:\n     * the game is already over,\n     * input row/column falls outside the board, or\n     * tile on the board is already occupied\n1. Determine the current player and set the tile to X or O respectively\n1. Update game state\n1. If the game is still active, increase the turn\n",
      "line": 36
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/setup_game.rs",
      "description": "### Game Setup: Instruction (1)\n\nNext, we should set up the two instructions. \n\nBut before that, we have to define the Accounts required for each instruction.\n\nWe already know, we have an Account to store our game state, so we add that one, referencing the `Game` struct we created just before.",
      "line": 13
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/setup_game.rs",
      "description": "### Game Setup: Instruction (2)\n\nSince this is a new account, we need to add `#[account(init)]` so it is created when the program starts.",
      "line": 12
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/setup_game.rs",
      "description": "### Game Setup: Instruction (3)\n\nIf you try to only specify `init`, the Rust compiler would complain that we need to add a `payer`.\n\nSince `init` creates \"rent-exempt\" accounts, the account needs to have some SOL in it. So we need to identify a payer to transfer these funds from.\n\n> An account should have at least 2 years' worth of rent stored in them, to make them \"rent-exempt\".\n\nFor someone to pay, they will need to sign the transaction. \n\nLet's say we want to make Player 1 pay the rent, so Player 1 is defined as a signer and identified in the `game` account's annotation as the `payer.",
      "line": 15
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/setup_game.rs",
      "description": "### Game Setup: Instruction (4)\n\nWe still have a problem. \n\nWe need to create a new account. Only the native System program can do this. \n\nOur program can only interact with accounts/programs that were passed into it. So we have to also pass in the System program.",
      "line": 16
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/setup_game.rs",
      "selection": {
        "start": {
          "line": 12,
          "character": 41
        },
        "end": {
          "line": 12,
          "character": 71
        }
      },
      "description": "### Game Setup: Instruction (5)\n\nOne last thing! (I swear!)\n\nTo create a new account, we need to also tell the System program how much space to allocate it. Do you remember the comments on the `Game` struct where we did this calculation?\n\nWe add another 8 bytes to account for the account discriminator hash that Anchor adds.\n\nThis is specified using the `space` constraint, alongside `init` and `payer`."
    },
    {
      "file": "programs/tic-tac-toe/src/lib.rs",
      "description": "### Game Setup: Instruction (6)\n\nWe finally can add the instruction function!\n\nWe will pass it the Accounts struct we just made, `SetupGame`, as part of the `Context`. \n\nWe also pass the public key for Player 2. Since we are not _doing_ anything with this Account, besides storing it in the game state, it can be passed as an argument, rather than in `SetupGame` struct. \n\nIt also saves some instruction space, not to mention avoids Solana runtime trying to fetch it for the `setup_game` instruction. ",
      "line": 16
    },
    {
      "file": "programs/tic-tac-toe/src/lib.rs",
      "description": "### Game Setup: Instruction (7)\n\nWe already implemented the game logic in the `instructions` module, so here we simply call it and pass in the arguments.\n\nAt this point, let's do a build:\n\n>> anchor build\n\nOnce it finishes successfully, it would have generated an IDL file, `target/idl/tic_tac_toe.json`. Please open it and review its content.",
      "line": 17
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "description": "### Game Setup: Test (1)\n\nThat generated IDL is used to dynamically create a Typescript client for our program. We can use this client to test our code!\n\nHere we are writing the code in `mocha`, a JavaScript unit testing library.",
      "line": 40
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "selection": {
        "start": {
          "line": 41,
          "character": 1
        },
        "end": {
          "line": 43,
          "character": 54
        }
      },
      "description": "### Game Setup: Test (2)\n\nFirst, we need to create some key pairs, representing the various accounts we are working with.\n\nSince `playerOne` is paying (and signing) for the transaction, we set its keypair to our program wallet. You may remember that the wallet is configured in `Anchor.toml` file."
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "selection": {
        "start": {
          "line": 44,
          "character": 1
        },
        "end": {
          "line": 45,
          "character": 38
        }
      },
      "description": "### Game Setup: Test (3)\n\nNow we're ready to call the program!\n\nThe IDL has made things very easy. `setupGame` appears as one of the methods and it knows about the `playerTwo` public key argument already."
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "selection": {
        "start": {
          "line": 46,
          "character": 1
        },
        "end": {
          "line": 49,
          "character": 9
        }
      },
      "description": "### Game Setup: Test (4)\n\nThen we pass the accounts to `accounts()`. \n\nWe don't have to pass in `system_program` because that is a standard program that Anchor, helpfully, infers. This is true of some other accounts like `token_program` or `rent` sysvar.'"
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "description": "### Game Setup: Test (5)\n\nNext, we identify the signers. There is actually two signers: \n\n* `gameKeyPair` since we are creating an Account in this instruction so the program has to sign its creation transaction\n* `playerOne`, who is paying for the transaction\n\nAgain, because we already defined `playerOne` as a `Signer` account, Anchor can infer that and we don't have to explicitly include it as a signer.",
      "line": 50
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "description": "### Game Setup: Test (6)\n\nOnce we send the transaction, we can retrieve the game state account using `program.account` helper and assert some conditions on it.\n\nThis is probably a good time to run the test again:\n\n>> anchor test\n\nAnchor CLI only prints out the failing program invocation logs on the terminal. Head over to `.anchor/program-logs` directory and you should be able to see the logs for this test case, at the top of the log file.",
      "line": 53
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/play.rs",
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 1
        }
      },
      "description": "### Play: Instruction (1)\n\nLet's move on to our second instruction: Play!\n\nBy now, the way we define the Accounts should look familiar. \n\nPredictably, this instruction receives the game state Account and the Account for whichever player whose turn it is.\n\nThe player needs to sign for the transaction so we can verify their identity and someone else can't take their turn."
    },
    {
      "file": "programs/tic-tac-toe/src/instructions/play.rs",
      "selection": {
        "start": {
          "line": 5,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 2
        }
      },
      "description": "### Play: Instruction (2)\n\nMuch of the implementation for this instruction is delegated to the `Game` implementation.\n\nHowever, we do check the player who has signed for this transaction is the `current_player`, i.e. it is their turn."
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 31,
          "character": 2
        }
      },
      "description": "### Play: Test (1)\n\nNow we need to write a few test cases to test our `play` instruction.\n\nTo keep things DRY, we create a helper function that makes the program call."
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "description": "### Play: Test (2)\n\nNow we can simulate a whole game to make sure it functions correctly.\n\nFeel free to review the test cases.",
      "line": 67
    },
    {
      "file": "tests/tic-tac-toe.ts",
      "selection": {
        "start": {
          "line": 165,
          "character": 1
        },
        "end": {
          "line": 185,
          "character": 6
        }
      },
      "description": "### Play: Test (3)\n\nAlong the way, we also do some negative testing to make sure the program cannot be exploited by providing incorrect input.\n\nFor example, this one checks for out-of-bound errors.\n\nAlso please note, how we can retrieve the `AnchorError`s and assert their values."
    },
    {
      "title": "Deployment",
      "description": "### Deployment\n\nOnce all the tests pass, we are ready to deploy the program.\n\nCurrently, our options are to deploy to `mainnet-beta`, `devnet` and `testnet`. For developers, the first two are most relevant (`testnet` is primarily for validators).\n\nLet's try deploying to `devnet` by following this deployment checklist 🚀:\n\n1\\. Run \n>> anchor build\n\nYour program key pair is now in `target/deploy`. **Keep this keypair secret.** You can reuse it on all clusters.\n\n2\\. Run\n>> anchor keys list\n\nThis will display the key pair's public key.\n\n3\\. Copy the public key into your `declare_id()` macro in [`lib.rs`](./programs/src/lib.rs).\n\n4\\. Run again\n>> anchor build\n\nThis is needed so the new program ID is included in the binary.\n\n5\\. Change `provider.cluster` variable in [`Anchor.toml`](./Anchor.toml) to `devnet`\n\n6\\. Run\n>> anchor deploy\n\n7\\. Run\n>> anchor test"
    },
    {
      "title": "Directory Organisation",
      "description": "### Directory Organisation\n\nA side note on how this Anchor repository is structured.\n\nMost Anchor programs you encounter tend to be a single `lib.rs` file.\n\nThis project has opted for a more scalable structure, following the [conventions](https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html) in Rust programs.\n\nOne crucial difference is the way each instruction module is imported using a wildcard, e.g. `use instructions::play::*;`. This is required because Anchor makes some assumptions about all relevant generated code to be in the same module."
    },
    {
      "title": "The End",
      "description": "# Well done!\n\nYou have now completed this tour and hopefully have a good idea about how Anchor programs are developed.\n\nThere is still plenty to be learnt! \n\nHead over to [Anchor Documentation](https://www.anchor-lang.com/docs) to continue your journey."
    }
  ],
  "ref": "main"
}